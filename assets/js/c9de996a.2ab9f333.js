"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([[6609],{8194:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>u,contentTitle:()=>t,default:()=>a,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var i=s(5893),o=s(1151);const r={sidebar_position:9},t=void 0,l={id:"devops/G\xe9rez le Versioning en livraison continue",title:"G\xe9rez le Versioning en livraison continue",description:"Contr\xf4le de version s\xe9mantique (SemVer)",source:"@site/docs/devops/G\xe9rez le Versioning en livraison continue.md",sourceDirName:"devops",slug:"/devops/G\xe9rez le Versioning en livraison continue",permalink:"/docs/devops/G\xe9rez le Versioning en livraison continue",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Utilisez Ansible pour automatiser le d\xe9ploiement de votre application",permalink:"/docs/devops/Utilisez Ansible pour automatiser le d\xe9ploiement de votre application"},next:{title:"Construisez un pipeline CI-CD avec Jenkins",permalink:"/docs/devops/Construisez un pipeline CI-CD avec Jenkins"}},u={},c=[{value:"Contr\xf4le de version s\xe9mantique (SemVer)",id:"contr\xf4le-de-version-s\xe9mantique-semver",level:2},{value:"Contr\xf4le de version continu (CV)",id:"contr\xf4le-de-version-continu-cv",level:2},{value:"Gestion des versions hybrides",id:"gestion-des-versions-hybrides",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"contr\xf4le-de-version-s\xe9mantique-semver",children:"Contr\xf4le de version s\xe9mantique (SemVer)"}),"\n",(0,i.jsxs)(n.p,{children:["Le ",(0,i.jsx)(n.a,{href:"https://semver.org/lang/fr/",children:"Contr\xf4le de version s\xe9mantique"})," (SemVer) est un sch\xe9ma de gestion des versions largement utilis\xe9 dans le d\xe9veloppement logiciel. Il suit un format de trois parties : MAJOR (majeure), MINOR (mineure), et PATCH (correctif). Ces num\xe9ros de version sont utilis\xe9s pour indiquer les changements apport\xe9s \xe0 un logiciel, et chaque partie a une signification sp\xe9cifique :"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"MAJOR (majeure) :"})," Augment\xe9e pour les changements incompatibles avec les versions ant\xe9rieures."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"MINOR (mineure) :"})," Augment\xe9e pour les ajouts compatibles avec les versions ant\xe9rieures."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PATCH (correctif) :"})," Augment\xe9e pour les corrections de bugs compatibles avec les versions ant\xe9rieures"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Le ",(0,i.jsx)(n.strong,{children:"SemVer"})," a une limitation en ce qui concerne la repr\xe9sentation de l'\xe9tat r\xe9el du logiciel sur un syst\xe8me de d\xe9ploiement continu (CD). Il se concentre principalement sur la versionnage du code source en fonction des changements fonctionnels, mais il ne couvre pas n\xe9cessairement tous les aspects de l'\xe9tat du logiciel en production."]}),"\n",(0,i.jsx)(n.h2,{id:"contr\xf4le-de-version-continu-cv",children:"Contr\xf4le de version continu (CV)"}),"\n",(0,i.jsx)(n.p,{children:"Le Contr\xf4le de version continu (CV) est un sch\xe9ma de contr\xf4le de version qui vise \xe0 g\xe9n\xe9rer un num\xe9ro de version unique pour chaque version logicielle en prenant en compte divers facteurs tels que la date, l'heure, la branche, la validation, le num\xe9ro de build ou l'environnement. L'objectif est de fournir un moyen efficace de suivre l'historique et la provenance du logiciel, tout en facilitant des d\xe9ploiements rapides et fr\xe9quents sur des syst\xe8mes de d\xe9ploiement continu (CD)."}),"\n",(0,i.jsx)(n.p,{children:"Cependant, il est important de noter que le Contr\xf4le de version continu pr\xe9sente des d\xe9fis potentiels. L'un des principaux d\xe9fis est la perte de la signification s\xe9mantique des num\xe9ros de version."}),"\n",(0,i.jsx)(n.h2,{id:"gestion-des-versions-hybrides",children:"Gestion des versions hybrides"}),"\n",(0,i.jsx)(n.p,{children:"Pour simplifier notre processus de gestion des versions et le rendre plus efficace, nous allons fusionner les avantages de SemVer et de CV. Nous utiliserons \xe0 la fois un composant s\xe9mantique et un composant continu dans le num\xe9ro de version."}),"\n",(0,i.jsxs)(n.p,{children:["\xc0 chaque build, nous r\xe9cup\xe9rerons la version du projet \xe0 partir du fichier pom.xml. Ensuite, nous ajouterons l'environnement cible en fonction de la branche Git, par exemple, ",(0,i.jsx)(n.code,{children:"dev"})," ou ",(0,i.jsx)(n.code,{children:"prod"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Nous ajouterons \xe9galement le num\xe9ro de build (Jenkins attribue automatiquement un num\xe9ro de build qui s'auto-incr\xe9mente)."}),"\n",(0,i.jsx)(n.p,{children:"Enfin, nous inclurons l'ID du commit Git."}),"\n",(0,i.jsx)(n.p,{children:"Cette approche nous permettra de b\xe9n\xe9ficier \xe0 la fois de la clart\xe9 s\xe9mantique des versions pour comprendre les changements fonctionnels et de la sp\xe9cificit\xe9 des num\xe9ros de version continus pour suivre de pr\xe8s les d\xe9ploiements et l'historique du code."}),"\n",(0,i.jsx)(n.p,{children:"La version sera repr\xe9sent\xe9e selon le format suivant :"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"Version=MAJEUR.MINEUR.CORRECTIF-ENV.NumeroBuild.CommitGit-Id\n"})})]})}function a(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>t});var i=s(7294);const o={},r=i.createContext(o);function t(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);